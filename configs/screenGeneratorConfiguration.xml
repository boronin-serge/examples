<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ScreenGeneratorConfiguration">
    <option name="settings">
      <Settings>
        <option name="screenElements">
          <list>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%Component" />
              <option name="name" value="DaggerComponent" />
              <option name="template" value="package %packageName%.di&#10;&#10;import dagger.BindsInstance&#10;import dagger.Subcomponent&#10;import %packageName%.ui.OnboardingFragment&#10;&#10;@Subcomponent(modules = [%screenName%Module::class])&#10;interface %screenName%Component {&#10;    &#10;    @Subcomponent.Factory&#10;    interface Factory {&#10;        fun create(@BindsInstance fragment: %screenName%Fragment): %screenName%Component&#10;    }&#10;&#10;    fun inject(fragment: %screenName%Fragment)&#10;}   &#10;        &#10;        " />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%Module" />
              <option name="name" value="DaggerModule" />
              <option name="template" value="package %packageName%.di&#10;&#10;import dagger.Module&#10;import dagger.Provides&#10;import %packageName%.navigator.%screenName%Navigator&#10;import %packageName%.navigator.%screenName%NavigatorImpl&#10;import %packageName%.ui.%screenName%Fragment&#10;import ru.boronin.common.navigation.AppNavigatorHandlerImpl&#10;import ru.boronin.core.api.navigator.NavigatorHandler&#10;&#10;@Module&#10;class %screenName%Module {&#10;    &#10;    @Provides&#10;    fun provideNavigator(&#10;        navigatorHandler: NavigatorHandler,&#10;        fragment: %screenName%Fragment&#10;    ): %screenName%Navigator {&#10;        return %screenName%NavigatorImpl().apply {&#10;            globalHandler = navigatorHandler&#10;            localHandler = fragment.getLocalNavigator()&#10;        }&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%Navigator" />
              <option name="name" value="Navigator" />
              <option name="template" value="package %packageName%.navigator&#10;&#10;interface %screenName%%screenElement% {&#10;    &#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="NavigatorImpl" />
              <option name="template" value="package %packageName%.navigator&#10;&#10;import ru.boronin.common.navigation.AppNavigator&#10;&#10;class %screenName%%screenElement%  : AppNavigator(), %screenName%Navigator {&#10;    &#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenNameSnakeCase%_%screenElement%" />
              <option name="name" value="contract" />
              <option name="template" value="package %packageName%.ui&#10;&#10;import ru.boronin.cardtasker.common.presentation.mvp.MvpView&#10;&#10;interface %screenName%View : MvpView {&#10;    &#10;}&#10;&#10;interface %screenName%Action {&#10;    &#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Fragment" />
              <option name="template" value="package %packageName%.ui&#10;&#10;import android.view.View&#10;import kotlinx.android.synthetic.main.%screenNameLowerCase%_fragment.*&#10;import ru.boronin.cardtasker.common.presentation.mvp.BaseView&#10;import %packageName%.di.%screenName%Component&#10;import ru.boronin.cardtasker.R&#10;import ru.boronin.cardtasker.features.main.di.activity.ActivityComponent&#10;import javax.inject.Inject&#10;&#10;class %screenName%%screenElement% : BaseView&lt;%screenName%View, %screenName%Presenter, %screenName%Component&gt;(), %screenName%View {&#10;    &#10;    @Inject &#10;    override lateinit var presenter: %screenName%Presenter&#10;    &#10;    override fun getLayout() = R.layout.%screenNameLowerCase%_fragment&#10;            &#10;    override fun onViewBound(view: View) {&#10;        initToolbar()&#10;        initListeners()&#10;    }&#10;&#10;    override fun initDagger(activityComponent: ActivityComponent) {&#10;        component = activityComponent.%screenNameLowerCase%Factory().create(this)&#10;        component?.inject(this)&#10;    }&#10;&#10;    // region private&#10;&#10;    private fun initToolbar() {&#10;        setVisibleToolbar(false)&#10;    }&#10;&#10;    private fun initListeners() {&#10;&#10;    }&#10;&#10;    // endregion&#10;&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Presenter" />
              <option name="template" value="package %packageName%.ui&#10;&#10;import ru.boronin.cardtasker.common.presentation.mvp.BasePresenter&#10;import %packageName%.navigator.%screenName%Navigator&#10;import javax.inject.Inject&#10;&#10;class %screenName%%screenElement% @Inject constructor(&#10;    private val navigator: %screenName%Navigator&#10;) : BasePresenter&lt;%screenName%View&gt;(), %screenName%Action {&#10;    &#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenNameLowerCase%_fragment" />
              <option name="fileType" value="Layout XML" />
              <option name="name" value="layout" />
              <option name="template" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </ScreenElement>
          </list>
        </option>
      </Settings>
    </option>
  </component>
</project>